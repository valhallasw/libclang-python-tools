{"name":"Libclang-python-tools","body":"libclang-based globals describer\r\n================================\r\n\r\nThis is a simple python script to get a list of globals from a c/c++ file with the locations they are being used. Due to limitations in libclang, it doesn't show whether it's used in an assignment or not.\r\n\r\n\r\nExample\r\n-------\r\nThis example is included as [test.cpp](test.cpp).\r\n\r\n```c++\r\nint i;\r\nint k;\r\n\r\nint a() {\r\n    i = 5;\r\n}\r\n\r\nint b() {\r\n    int j = i;\r\n    k=i;\r\n}\r\n```\r\n\r\nresults in:\r\n\r\n```\r\n$ python test.py\r\ni at <SourceLocation file 'test.cpp', line 1, column 5>\r\n >  test.cpp:    5, in a(): i = 5;\r\n >  test.cpp:    9, in b(): int j = i;\r\n >  test.cpp:   10, in b(): k=i;\r\n----------------------------------------\r\n\r\nk at <SourceLocation file 'test.cpp', line 2, column 5>\r\n >  test.cpp:   10, in b(): k=i;\r\n----------------------------------------\r\n```\r\n\r\nRequirements\r\n------------\r\nlibclang and its python bindings. In my case, I downloaded the [clang binaries](http://llvm.org/releases/download.html), and retrieved the python bindings from the [svn repository](http://llvm.org/svn/llvm-project/cfe/trunk/bindings/python).\r\n\r\nIn the python bindings, I had to adapt\r\n\r\n    def get_cindex_library()\r\n\r\nin clang/cindex.py to refer to the correct libclang.so; I extracted the clang binaries in a subdirectory of the python bindings, and used the following:\r\n\r\n```python\r\n    import os\r\n    dll = os.path.join(os.path.split(__file__)[0], \"clang_package\", \"lib\", \"libclang.so\")\r\n    return cdll.LoadLibrary(dll)\r\n```\r\n\r\nIf your operating system has a working libclang.so, you should be able to use the python bindings without downloading the binaries & without adapting the dll path.\r\n\r\n\r\n","tagline":"Python tools to make working with legacy C(++) code easier.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}